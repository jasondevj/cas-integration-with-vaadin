<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns:b="http://www.springframework.org/schema/beans"
         xmlns="http://www.springframework.org/schema/security"
         xmlns:p="http://www.springframework.org/schema/p"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:context="http://www.springframework.org/schema/context"
         xmlns:util="http://www.springframework.org/schema/util"
         xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">


    <!-- Configuration for the environment can be overriden by system properties -->
    <context:property-placeholder system-properties-mode="OVERRIDE" properties-ref="environment"/>
    <util:properties id="environment" location="classpath:cas.properties"/>

    <http entry-point-ref="casEntryPoint" use-expressions="true">
        <intercept-url pattern="/" access="permitAll"/>
        <intercept-url pattern="/VAADIN/**" access="permitAll"/>
        <intercept-url pattern="/register/**" access="permitAll"/>
        <intercept-url pattern="/home/**" access="permitAll"/>
        <intercept-url pattern="/index**" access="permitAll"/>
        <intercept-url pattern="/cas-logout**" access="permitAll"/>
        <intercept-url pattern="/cas-failed**" access="permitAll"/>

        <intercept-url pattern="/secure/extreme/**" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/**" access="hasRole('ROLE_DEFAULT_ACCESS')"/>
        <intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/user/**" access="hasRole('ROLE_DEFAULT_ACCESS')"/>
        <custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
        <custom-filter ref="casFilter" position="CAS_FILTER"/>
        <logout logout-success-url="/cas-logout**"/>
    </http>

    <authentication-manager alias="authManager">
        <authentication-provider ref="casAuthProvider"/>
    </authentication-manager>

    <user-service id="userService">
        <user name="admin" password="admin" authorities="ROLE_ADMIN,ROLE_DEFAULT_ACCESS"/>
        <user name="dianne" password="dianne" authorities="ROLE_DEFAULT_ACCESS"/>
        <user name="scott" password="scott" authorities="ROLE_DEFAULT_ACCESS"/>
    </user-service>

    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <b:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>
    <!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
    <b:bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter"
            p:filterProcessesUrl="${logout.url}">
        <b:constructor-arg value="${cas.server.host}${cas.logout.path}"/>
        <b:constructor-arg>
            <b:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </b:constructor-arg>
    </b:bean>

    <b:bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties"
            p:service="${cas.security.check.path}"/>

    <b:bean id="casEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint"
            p:serviceProperties-ref="serviceProperties" p:loginUrl="${cas.server.host}${cas.login.path}"/>

    <b:bean id="casFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter"
            p:authenticationManager-ref="authManager"
            p:serviceProperties-ref="serviceProperties"
            p:proxyGrantingTicketStorage-ref="pgtStorage"
            p:proxyReceptorUrl="/j_spring_cas_security_proxyreceptor">
        <b:property name="authenticationFailureHandler">
            <b:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
                    p:defaultFailureUrl="/casfailed.jsp"/>
        </b:property>
    </b:bean>
    <!--
        NOTE: In a real application you should not use an in memory implementation. You will also want
              to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup()
     -->
    <b:bean id="pgtStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"/>

    <b:bean id="casAuthProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
            p:serviceProperties-ref="serviceProperties"
            p:key="casAuthProviderKey">
        <b:property name="authenticationUserDetailsService">
            <b:bean class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper"
                    p:userDetailsService-ref="userService"/>
        </b:property>
        <b:property name="ticketValidator">
            <b:bean class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator"
                    p:acceptAnyProxy="true"
                    p:proxyCallbackUrl="${proxy.callback.url}"
                    p:proxyGrantingTicketStorage-ref="pgtStorage">
                <b:constructor-arg value="${cas.server.host}"/>
            </b:bean>
        </b:property>
    </b:bean>
</b:beans>